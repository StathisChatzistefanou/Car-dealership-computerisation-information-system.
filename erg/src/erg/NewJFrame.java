/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package erg;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author stathis
 */
public class NewJFrame extends javax.swing.JFrame {


     static String     driverClassName = "org.postgresql.Driver" ;
    static String     url = "jdbc:postgresql://dblabs.it.teithe.gr:5432/it164835" ;
    static Connection dbConnection = null;
    static String     username = "it164835";
    static String     passwd = "stathis1997";
    static Statement  statement       = null;
    static ResultSet rs		      = null;
    static PreparedStatement  insertauto       = null;
    public NewJFrame() {
        initComponents();
    
    }
    
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPAutokinhto = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jID = new javax.swing.JTextField();
        jMarka = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableauto = new javax.swing.JTable();
        jBAdd = new javax.swing.JButton();
        jBDelete = new javax.swing.JButton();
        jBupdateauto = new javax.swing.JButton();
        jKafsimo = new javax.swing.JTextField();
        jXroma = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTlogfileauto = new javax.swing.JTable();
        jPPelaths = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jBaddpel = new javax.swing.JButton();
        jBdeletepel = new javax.swing.JButton();
        jBupdatepel = new javax.swing.JButton();
        jTextepithetopel = new javax.swing.JTextField();
        jTextonomapel = new javax.swing.JTextField();
        jTextIDpel = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTablepelaths = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTlogpel = new javax.swing.JTable();
        jPAntipros = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jBaddpel1 = new javax.swing.JButton();
        jBdeletepel1 = new javax.swing.JButton();
        jBupdatepel1 = new javax.swing.JButton();
        jTextonomapel1 = new javax.swing.JTextField();
        jTextIDpel1 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTablepelaths1 = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTlogantip = new javax.swing.JTable();
        jPPoliths = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextID = new javax.swing.JTextField();
        jTextonoma = new javax.swing.JTextField();
        jTextepitheto = new javax.swing.JTextField();
        jBaddpol = new javax.swing.JButton();
        jBdeletepol = new javax.swing.JButton();
        jBupdatepol = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablepoliths = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTlogpoliths = new javax.swing.JTable();
        jPSinopsh = new javax.swing.JPanel();
        jBemfanish = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTsinopsis = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("ID:");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setText("Μάρκα:");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setText("Καύσιμο:");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel4.setText("Χρώμα:");

        jID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jIDActionPerformed(evt);
            }
        });

        jMarka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMarkaActionPerformed(evt);
            }
        });

        jTableauto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableauto);

        jBAdd.setText("ADD");
        jBAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAddActionPerformed(evt);
            }
        });

        jBDelete.setText("DELETE");
        jBDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDeleteActionPerformed(evt);
            }
        });

        jBupdateauto.setText("UPDATE");
        jBupdateauto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBupdateautoActionPerformed(evt);
            }
        });

        jKafsimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jKafsimoActionPerformed(evt);
            }
        });

        jXroma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXromaActionPerformed(evt);
            }
        });

        jTlogfileauto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(jTlogfileauto);

        javax.swing.GroupLayout jPAutokinhtoLayout = new javax.swing.GroupLayout(jPAutokinhto);
        jPAutokinhto.setLayout(jPAutokinhtoLayout);
        jPAutokinhtoLayout.setHorizontalGroup(
            jPAutokinhtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPAutokinhtoLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPAutokinhtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPAutokinhtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jID)
                    .addComponent(jMarka, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addGap(38, 38, 38)
                .addGroup(jPAutokinhtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPAutokinhtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jKafsimo, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXroma, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(246, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPAutokinhtoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPAutokinhtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPAutokinhtoLayout.createSequentialGroup()
                        .addComponent(jBAdd)
                        .addGap(42, 42, 42)
                        .addComponent(jBDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 439, Short.MAX_VALUE)
                        .addComponent(jBupdateauto))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane6))
                .addContainerGap())
        );
        jPAutokinhtoLayout.setVerticalGroup(
            jPAutokinhtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPAutokinhtoLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPAutokinhtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jKafsimo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPAutokinhtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jMarka, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jXroma, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPAutokinhtoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBAdd)
                    .addComponent(jBDelete)
                    .addComponent(jBupdateauto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Αυτοκίνητο", jPAutokinhto);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel8.setText("ID:");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel9.setText("Όνομα:");

        jLabel10.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel10.setText("Επίθετο:");

        jBaddpel.setText("ADD");
        jBaddpel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBaddpelActionPerformed(evt);
            }
        });

        jBdeletepel.setText("DELETE");
        jBdeletepel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBdeletepelActionPerformed(evt);
            }
        });

        jBupdatepel.setText("UPDATE");
        jBupdatepel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBupdatepelActionPerformed(evt);
            }
        });

        jTablepelaths.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTablepelaths);

        jTlogpel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(jTlogpel);

        javax.swing.GroupLayout jPPelathsLayout = new javax.swing.GroupLayout(jPPelaths);
        jPPelaths.setLayout(jPPelathsLayout);
        jPPelathsLayout.setHorizontalGroup(
            jPPelathsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPPelathsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPelathsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
                    .addComponent(jScrollPane7)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPPelathsLayout.createSequentialGroup()
                        .addGroup(jPPelathsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPPelathsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextIDpel)
                            .addComponent(jTextonomapel)
                            .addComponent(jTextepithetopel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPPelathsLayout.createSequentialGroup()
                        .addComponent(jBaddpel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBdeletepel)
                        .addGap(124, 124, 124)
                        .addComponent(jBupdatepel)))
                .addContainerGap())
        );
        jPPelathsLayout.setVerticalGroup(
            jPPelathsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPelathsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPelathsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextIDpel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPPelathsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextonomapel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPPelathsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addGroup(jPPelathsLayout.createSequentialGroup()
                        .addComponent(jTextepithetopel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPPelathsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBaddpel)
                    .addComponent(jBdeletepel)
                    .addComponent(jBupdatepel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Πελάτης", jPPelaths);

        jLabel11.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel11.setText("ID:");

        jLabel12.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel12.setText("Περιοχή:");

        jBaddpel1.setText("ADD");
        jBaddpel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBaddpel1ActionPerformed(evt);
            }
        });

        jBdeletepel1.setText("DELETE");
        jBdeletepel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBdeletepel1ActionPerformed(evt);
            }
        });

        jBupdatepel1.setText("UPDATE");
        jBupdatepel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBupdatepel1ActionPerformed(evt);
            }
        });

        jTablepelaths1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(jTablepelaths1);

        jTlogantip.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane9.setViewportView(jTlogantip);

        javax.swing.GroupLayout jPAntiprosLayout = new javax.swing.GroupLayout(jPAntipros);
        jPAntipros.setLayout(jPAntiprosLayout);
        jPAntiprosLayout.setHorizontalGroup(
            jPAntiprosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPAntiprosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPAntiprosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
                    .addGroup(jPAntiprosLayout.createSequentialGroup()
                        .addComponent(jBaddpel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBdeletepel1)
                        .addGap(124, 124, 124)
                        .addComponent(jBupdatepel1))
                    .addGroup(jPAntiprosLayout.createSequentialGroup()
                        .addGroup(jPAntiprosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(jPAntiprosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextIDpel1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(jTextonomapel1))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane9))
                .addContainerGap())
        );
        jPAntiprosLayout.setVerticalGroup(
            jPAntiprosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPAntiprosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPAntiprosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextIDpel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPAntiprosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextonomapel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPAntiprosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBaddpel1)
                    .addComponent(jBdeletepel1)
                    .addComponent(jBupdatepel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Αντιπροσωπία", jPAntipros);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel5.setText("ID:");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel6.setText("Όνομα:");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel7.setText("Επίθετο:");

        jBaddpol.setText("ADD");
        jBaddpol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBaddpolActionPerformed(evt);
            }
        });

        jBdeletepol.setText("DELETE");
        jBdeletepol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBdeletepolActionPerformed(evt);
            }
        });

        jBupdatepol.setText("UPDATE");
        jBupdatepol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBupdatepolActionPerformed(evt);
            }
        });

        jTablepoliths.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTablepoliths);

        jTlogpoliths.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane8.setViewportView(jTlogpoliths);

        javax.swing.GroupLayout jPPolithsLayout = new javax.swing.GroupLayout(jPPoliths);
        jPPoliths.setLayout(jPPolithsLayout);
        jPPolithsLayout.setHorizontalGroup(
            jPPolithsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPolithsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPolithsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
                    .addGroup(jPPolithsLayout.createSequentialGroup()
                        .addGroup(jPPolithsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPPolithsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextID)
                            .addComponent(jTextonoma)
                            .addComponent(jTextepitheto, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPPolithsLayout.createSequentialGroup()
                        .addComponent(jBaddpol)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBdeletepol)
                        .addGap(124, 124, 124)
                        .addComponent(jBupdatepol)))
                .addContainerGap())
        );
        jPPolithsLayout.setVerticalGroup(
            jPPolithsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPolithsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPPolithsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPPolithsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextonoma, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPPolithsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addGroup(jPPolithsLayout.createSequentialGroup()
                        .addComponent(jTextepitheto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPPolithsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBaddpol)
                    .addComponent(jBdeletepol)
                    .addComponent(jBupdatepol))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Πωλητής", jPPoliths);

        jBemfanish.setText("Εμφάνιση πωλήσεων");
        jBemfanish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBemfanishActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel13.setText("Πιέστε το κουμπί για την εμφάνιση των πωλήσεων.");

        jTsinopsis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(jTsinopsis);

        javax.swing.GroupLayout jPSinopshLayout = new javax.swing.GroupLayout(jPSinopsh);
        jPSinopsh.setLayout(jPSinopshLayout);
        jPSinopshLayout.setHorizontalGroup(
            jPSinopshLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPSinopshLayout.createSequentialGroup()
                .addContainerGap(169, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(88, 88, 88))
            .addGroup(jPSinopshLayout.createSequentialGroup()
                .addGap(253, 253, 253)
                .addComponent(jBemfanish)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPSinopshLayout.setVerticalGroup(
            jPSinopshLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPSinopshLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBemfanish)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Σύνοψη", jPSinopsh);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAddActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel modelauto = (DefaultTableModel) jTableauto.getModel();
        modelauto.setRowCount(0);
        
        
        if(jID.getText().equals("") || jMarka.getText().equals("")|| jKafsimo.getText().equals("")|| jXroma.getText().equals("")){
           JOptionPane.showMessageDialog(this, "Βάλτε όλα τα δεδομένα.");
    }else {
           
        int vid = Integer.valueOf(jID.getText());
        String vmarka = jMarka.getText();
        String vkafsimo = jKafsimo.getText();
        String vxroma = jXroma.getText();
        System.out.println(vmarka);
        
        try {
                Class.forName (driverClassName);
            } catch (ClassNotFoundException ex) {
            }
        try {    
        dbConnection = DriverManager.getConnection (url, username, passwd);
        String insertString = "select insertauto(?,?,?,?)";
	insertauto = dbConnection.prepareStatement(insertString);
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
                
                try {
                    insertauto.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
                try {
                    dbConnection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        
                 try {
            insertauto.setInt(1, vid);
            insertauto.setString(2, vmarka);
            insertauto.setString(3, vkafsimo);
            insertauto.setString(4, vxroma);
            insertauto.executeUpdate();
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
                try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistrofhautokinhto() as ANSWER";
             rs = statement.executeQuery(selectString);
            //System.out.println("anid, perioxi, aid, marka, kafsimo, xroma, poid, onoma, epitheto " );
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
                count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
            }
            } 
            Object[][] row = new Object[count][4];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
             index++;
            } 
           
             String[] cols = {"ID", "Μάρκα", "Καύσιμο", "Χρώμα"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTableauto.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
                
                  try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistofilogauto() as ANSWER";
             rs = statement.executeQuery(selectString);
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
            count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","").replaceAll(" ", ".");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
                
            }
            } 
            Object[][] row = new Object[count][6];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
              row[index][4]= pwlhsh[4];
              row[index][5]= pwlhsh[5];
             index++;
            } 
           
             String[] cols = {"op", "date", "ID", "Μάρκα", "Καύσιμο", "Χρώμα"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTlogfileauto.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        } 
         
        
 
    }//GEN-LAST:event_jBAddActionPerformed

    private void jBemfanishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBemfanishActionPerformed
         
        
       // String selectedcolor = String.valueOf(anid.getSelectedItem());
        
        
         try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT  epistrofh() as ANSWER";
             rs = statement.executeQuery(selectString);
            System.out.println("anid, perioxi, aid, marka, kafsimo, xroma, poid, onoma, epitheto " );
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String pwliseis = rs.getString("ANSWER"); 
                count++;
            pwliseis = pwliseis.replaceAll("\\)"," ").replaceAll("\\(","");
            String[] ss = pwliseis.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
            }
            } 
            Object[][] row = new Object[count][9];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
              row[index][4]= pwlhsh[4];
              row[index][5]= pwlhsh[5];
              row[index][6]= pwlhsh[6];
              row[index][7]= pwlhsh[7];
              row[index][8]= pwlhsh[8];
             index++;
            } 
           
             String[] cols = {"anid", "perioxi", "aid", "marka", "kafsimo", "xroma", "poid", "onoma", "epitheto"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTsinopsis.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        
    }//GEN-LAST:event_jBemfanishActionPerformed

    private void jIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jIDActionPerformed

    private void jMarkaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMarkaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMarkaActionPerformed

    private void jKafsimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jKafsimoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jKafsimoActionPerformed

    private void jXromaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXromaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jXromaActionPerformed

    private void jBaddpelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBaddpelActionPerformed
         
        if(jTextIDpel.getText().equals("") || jTextonomapel.getText().equals("")|| jTextepithetopel.getText().equals("")){
           JOptionPane.showMessageDialog(this, "Βάλτε όλα τα δεδομένα.");
    }else {
           
        int vid = Integer.valueOf(jTextIDpel.getText());
        String vonoma = jTextonomapel.getText();
        String vepitheto = jTextepithetopel.getText();
       
        
        try {
                Class.forName (driverClassName);
            } catch (ClassNotFoundException ex) {
            }
        try {    
        dbConnection = DriverManager.getConnection (url, username, passwd);
        String insertString = "select insertpelaths(?,?,?)";
	insertauto = dbConnection.prepareStatement(insertString);
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
                
                try {
                    insertauto.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
                try {
                    dbConnection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        
                 try {
            insertauto.setInt(1, vid);
            insertauto.setString(2, vonoma);
            insertauto.setString(3, vepitheto);
            insertauto.executeUpdate();
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
                try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistrofhpelaths() as ANSWER";
             rs = statement.executeQuery(selectString);
            //System.out.println("anid, perioxi, aid, marka, kafsimo, xroma, poid, onoma, epitheto " );
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
                count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
            }
            } 
            Object[][] row = new Object[count][3];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
             index++;
            } 
           
             String[] cols = {"ID", "Όνομα", "Επίθετο"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTablepelaths.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        } 
            try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistofilogpelaths() as ANSWER";
             rs = statement.executeQuery(selectString);
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
            count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","").replaceAll(" ", ".");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
                
            }
            } 
            Object[][] row = new Object[count][5];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
              row[index][4]= pwlhsh[4];
             index++;
            } 
           
             String[] cols = {"op", "date", "ID", "Όνομα", "Επίθετο"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTlogpel.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_jBaddpelActionPerformed

    private void jBaddpolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBaddpolActionPerformed
         if(jTextID.getText().equals("") || jTextonoma.getText().equals("")|| jTextepitheto.getText().equals("")){
           JOptionPane.showMessageDialog(this, "Βάλτε όλα τα δεδομένα.");
    }else {
           
        int vid = Integer.valueOf(jTextID.getText());
        String vonoma = jTextonoma.getText();
        String vepitheto = jTextepitheto.getText();
       
        
        try {
                Class.forName (driverClassName);
            } catch (ClassNotFoundException ex) {
            }
        try {    
        dbConnection = DriverManager.getConnection (url, username, passwd);
        String insertString = "select insertpoliths(?,?,?)";
	insertauto = dbConnection.prepareStatement(insertString);
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
                
                try {
                    insertauto.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
                try {
                    dbConnection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        
                 try {
            insertauto.setInt(1, vid);
            insertauto.setString(2, vonoma);
            insertauto.setString(3, vepitheto);
            insertauto.executeUpdate();
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
                try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistrofhpoliths() as ANSWER";
             rs = statement.executeQuery(selectString);
            //System.out.println("anid, perioxi, aid, marka, kafsimo, xroma, poid, onoma, epitheto " );
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
                count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
            }
            } 
            Object[][] row = new Object[count][3];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
             index++;
            } 
           
             String[] cols = {"ID", "Όνομα", "Επίθετο"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTablepoliths.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        } 
          try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistofilogpoliths() as ANSWER";
             rs = statement.executeQuery(selectString);
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
            count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","").replaceAll(" ", ".");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
                
            }
            } 
            Object[][] row = new Object[count][5];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
              row[index][4]= pwlhsh[4];
             index++;
            } 
           
             String[] cols = {"op", "date", "ID", "Όνομα", "Επίθετο"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTlogpoliths.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_jBaddpolActionPerformed

    private void jBaddpel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBaddpel1ActionPerformed
        
        if(jTextIDpel1.getText().equals("") || jTextonomapel1.getText().equals("")){
           JOptionPane.showMessageDialog(this, "Βάλτε όλα τα δεδομένα.");
    }else {
           
        int vid = Integer.valueOf(jTextIDpel1.getText());
        String vperioxi = jTextonomapel1.getText();
     
        try {
                Class.forName (driverClassName);
            } catch (ClassNotFoundException ex) {
            }
        try {    
        dbConnection = DriverManager.getConnection (url, username, passwd);
        String insertString = "select insertantiprosop(?,?)";
	insertauto = dbConnection.prepareStatement(insertString);
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
                
                try {
                    insertauto.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
                try {
                    dbConnection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        
                 try {
            insertauto.setInt(1, vid);
            insertauto.setString(2, vperioxi);
            insertauto.executeUpdate();
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
                try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistrofhantiprosop() as ANSWER";
             rs = statement.executeQuery(selectString);
            //System.out.println("anid, perioxi, aid, marka, kafsimo, xroma, poid, onoma, epitheto " );
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
                count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
            }
            } 
            Object[][] row = new Object[count][2];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
             index++;
            } 
           
             String[] cols = {"ID", "Περιοχή"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTablepelaths1.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        } 
          try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistofilogantip() as ANSWER";
             rs = statement.executeQuery(selectString);
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
            count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","").replaceAll(" ", ".");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
                
            }
            } 
            Object[][] row = new Object[count][4];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
             index++;
            } 
           
             String[] cols = {"op", "date", "ID", "Περιοχή"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTlogantip.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_jBaddpel1ActionPerformed

    private void jBupdateautoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBupdateautoActionPerformed
        
          
        DefaultTableModel modelauto = (DefaultTableModel) jTableauto.getModel();
        modelauto.setRowCount(0);
        
        
        if(jID.getText().equals("") || jMarka.getText().equals("")|| jKafsimo.getText().equals("")|| jXroma.getText().equals("")){
           JOptionPane.showMessageDialog(this, "Βάλτε όλα τα δεδομένα.");
    }else {
           
        int vid = Integer.valueOf(jID.getText());
        String vmarka = jMarka.getText();
        String vkafsimo = jKafsimo.getText();
        String vxroma = jXroma.getText();
        System.out.println(vmarka);
        
        try {
                Class.forName (driverClassName);
            } catch (ClassNotFoundException ex) {
            }
        try {    
        dbConnection = DriverManager.getConnection (url, username, passwd);
        String insertString = "select updateauto(?,?,?,?)";
	insertauto = dbConnection.prepareStatement(insertString);
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
                
                try {
                    insertauto.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
                try {
                    dbConnection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        
                 try {
            insertauto.setInt(1, vid);
            insertauto.setString(2, vmarka);
            insertauto.setString(3, vkafsimo);
            insertauto.setString(4, vxroma);
            insertauto.executeUpdate();
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
                try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistrofhautokinhto() as ANSWER";
             rs = statement.executeQuery(selectString);
            //System.out.println("anid, perioxi, aid, marka, kafsimo, xroma, poid, onoma, epitheto " );
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
                count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
            }
            } 
            Object[][] row = new Object[count][4];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
             index++;
            } 
           
             String[] cols = {"ID", "Μάρκα", "Καύσιμο", "Χρώμα"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTableauto.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        } 
         try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistofilogauto() as ANSWER";
             rs = statement.executeQuery(selectString);
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
            count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","").replaceAll(" ", ".");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
                
            }
            } 
            Object[][] row = new Object[count][6];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
              row[index][4]= pwlhsh[4];
              row[index][5]= pwlhsh[5];
             index++;
            } 
           
             String[] cols = {"op", "date", "ID", "Μάρκα", "Καύσιμο", "Χρώμα"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTlogfileauto.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        
    }//GEN-LAST:event_jBupdateautoActionPerformed

    private void jBupdatepelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBupdatepelActionPerformed
         if(jTextIDpel.getText().equals("") || jTextonomapel.getText().equals("")|| jTextepithetopel.getText().equals("")){
           JOptionPane.showMessageDialog(this, "Βάλτε όλα τα δεδομένα.");
    }else {
           
        int vid = Integer.valueOf(jTextIDpel.getText());
        String vonoma = jTextonomapel.getText();
        String vepitheto = jTextepithetopel.getText();
       
        
        try {
                Class.forName (driverClassName);
            } catch (ClassNotFoundException ex) {
            }
        try {    
        dbConnection = DriverManager.getConnection (url, username, passwd);
        String insertString = "select updatepelaths(?,?,?)";
	insertauto = dbConnection.prepareStatement(insertString);
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
                
                try {
                    insertauto.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
                try {
                    dbConnection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        
                 try {
            insertauto.setInt(1, vid);
            insertauto.setString(2, vonoma);
            insertauto.setString(3, vepitheto);
            insertauto.executeUpdate();
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
                try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistrofhpelaths() as ANSWER";
             rs = statement.executeQuery(selectString);
            //System.out.println("anid, perioxi, aid, marka, kafsimo, xroma, poid, onoma, epitheto " );
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
                count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
            }
            } 
            Object[][] row = new Object[count][3];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
             index++;
            } 
           
             String[] cols = {"ID", "Όνομα", "Επίθετο"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTablepelaths.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        } 
         try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistofilogpelaths() as ANSWER";
             rs = statement.executeQuery(selectString);
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
            count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","").replaceAll(" ", ".");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
                
            }
            } 
            Object[][] row = new Object[count][5];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
              row[index][4]= pwlhsh[4];
             index++;
            } 
           
             String[] cols = {"op", "date", "ID", "Όνομα", "Επίθετο"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTlogpel.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_jBupdatepelActionPerformed

    private void jBupdatepel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBupdatepel1ActionPerformed
          if(jTextIDpel1.getText().equals("") || jTextonomapel1.getText().equals("")){
           JOptionPane.showMessageDialog(this, "Βάλτε όλα τα δεδομένα.");
    }else {
           
        int vid = Integer.valueOf(jTextIDpel1.getText());
        String vperioxi = jTextonomapel1.getText();
     
        try {
                Class.forName (driverClassName);
            } catch (ClassNotFoundException ex) {
            }
        try {    
        dbConnection = DriverManager.getConnection (url, username, passwd);
        String insertString = "select updateantipro(?,?)";
	insertauto = dbConnection.prepareStatement(insertString);
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
                
                try {
                    insertauto.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
                try {
                    dbConnection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        
                 try {
            insertauto.setInt(1, vid);
            insertauto.setString(2, vperioxi);
            insertauto.executeUpdate();
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
                try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistrofhantiprosop() as ANSWER";
             rs = statement.executeQuery(selectString);
            //System.out.println("anid, perioxi, aid, marka, kafsimo, xroma, poid, onoma, epitheto " );
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
                count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
            }
            } 
            Object[][] row = new Object[count][2];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
             index++;
            } 
           
             String[] cols = {"ID", "Περιοχή"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTablepelaths1.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        } 
          try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistofilogantip() as ANSWER";
             rs = statement.executeQuery(selectString);
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
            count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","").replaceAll(" ", ".");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
                
            }
            } 
            Object[][] row = new Object[count][4];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
             index++;
            } 
           
             String[] cols = {"op", "date", "ID", "Περιοχή"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTlogantip.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_jBupdatepel1ActionPerformed

    private void jBupdatepolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBupdatepolActionPerformed
         if(jTextID.getText().equals("") || jTextonoma.getText().equals("")|| jTextepitheto.getText().equals("")){
           JOptionPane.showMessageDialog(this, "Βάλτε όλα τα δεδομένα.");
    }else {
           
        int vid = Integer.valueOf(jTextID.getText());
        String vonoma = jTextonoma.getText();
        String vepitheto = jTextepitheto.getText();
       
        
        try {
                Class.forName (driverClassName);
            } catch (ClassNotFoundException ex) {
            }
        try {    
        dbConnection = DriverManager.getConnection (url, username, passwd);
        String insertString = "select updatepoliths(?,?,?)";
	insertauto = dbConnection.prepareStatement(insertString);
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
                
                try {
                    insertauto.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
                try {
                    dbConnection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        
                 try {
            insertauto.setInt(1, vid);
            insertauto.setString(2, vonoma);
            insertauto.setString(3, vepitheto);
            insertauto.executeUpdate();
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
                try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistrofhpoliths() as ANSWER";
             rs = statement.executeQuery(selectString);
            //System.out.println("anid, perioxi, aid, marka, kafsimo, xroma, poid, onoma, epitheto " );
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
                count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
            }
            } 
            Object[][] row = new Object[count][3];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
             index++;
            } 
           
             String[] cols = {"ID", "Όνομα", "Επίθετο"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTablepoliths.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        } 
         try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistofilogpoliths() as ANSWER";
             rs = statement.executeQuery(selectString);
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
            count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","").replaceAll(" ", ".");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
                
            }
            } 
            Object[][] row = new Object[count][5];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
              row[index][4]= pwlhsh[4];
             index++;
            } 
           
             String[] cols = {"op", "date", "ID", "Όνομα", "Επίθετο"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTlogpoliths.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_jBupdatepolActionPerformed

    private void jBdeletepel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBdeletepel1ActionPerformed
  if(jTextIDpel1.getText().equals("")){
           JOptionPane.showMessageDialog(this, "Δώσε ID για διαγραφή");
    }else {
           
        int vid = Integer.valueOf(jTextIDpel1.getText());
        
     
        try {
                Class.forName (driverClassName);
            } catch (ClassNotFoundException ex) {
            }
        try {    
        dbConnection = DriverManager.getConnection (url, username, passwd);
        String insertString = "select deleteantiprosop(?)";
	insertauto = dbConnection.prepareStatement(insertString);
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
                
                try {
                    insertauto.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
                try {
                    dbConnection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        
                 try {
            insertauto.setInt(1, vid);
            //insertauto.setString(2, vperioxi);
            insertauto.executeUpdate();
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
                try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistrofhantiprosop() as ANSWER";
             rs = statement.executeQuery(selectString);
            //System.out.println("anid, perioxi, aid, marka, kafsimo, xroma, poid, onoma, epitheto " );
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
                count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
            }
            } 
            Object[][] row = new Object[count][2];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
             index++;
            } 
           
             String[] cols = {"ID", "Περιοχή"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTablepelaths1.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        }   
  try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistofilogantip() as ANSWER";
             rs = statement.executeQuery(selectString);
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
            count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","").replaceAll(" ", ".");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
                
            }
            } 
            Object[][] row = new Object[count][4];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
             index++;
            } 
           
             String[] cols = {"op", "date", "ID", "Περιοχή"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTlogantip.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_jBdeletepel1ActionPerformed

    private void jBDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDeleteActionPerformed
         DefaultTableModel modelauto = (DefaultTableModel) jTableauto.getModel();
        modelauto.setRowCount(0);
        
        
        if(jID.getText().equals("")){
           JOptionPane.showMessageDialog(this, "Δώσε ID για διαγραφή.");
    }else {
           
        int vid = Integer.valueOf(jID.getText());
  
        try {
                Class.forName (driverClassName);
            } catch (ClassNotFoundException ex) {
            }
        try {    
        dbConnection = DriverManager.getConnection (url, username, passwd);
        String insertString = "select deleteauto(?)";
	insertauto = dbConnection.prepareStatement(insertString);
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
                
                try {
                    insertauto.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
                try {
                    dbConnection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        
                 try {
            insertauto.setInt(1, vid);
            //insertauto.setString(2, vmarka);
            //insertauto.setString(3, vkafsimo);
            //insertauto.setString(4, vxroma);
             insertauto.executeUpdate();
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
                try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistrofhautokinhto() as ANSWER";
             rs = statement.executeQuery(selectString);
            //System.out.println("anid, perioxi, aid, marka, kafsimo, xroma, poid, onoma, epitheto " );
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
                count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
            }
            } 
            Object[][] row = new Object[count][4];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
             index++;
            } 
           
             String[] cols = {"ID", "Μάρκα", "Καύσιμο", "Χρώμα"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTableauto.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        } 
        
         try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistofilogauto() as ANSWER";
             rs = statement.executeQuery(selectString);
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
            count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","").replaceAll(" ", ".");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
                
            }
            } 
            Object[][] row = new Object[count][6];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
              row[index][4]= pwlhsh[4];
              row[index][5]= pwlhsh[5];
             index++;
            } 
           
             String[] cols = {"op", "date", "ID", "Μάρκα", "Καύσιμο", "Χρώμα"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTlogfileauto.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        
    }//GEN-LAST:event_jBDeleteActionPerformed

    private void jBdeletepelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBdeletepelActionPerformed
     
        if(jTextIDpel.getText().equals("")){
           JOptionPane.showMessageDialog(this, "Δώσε ID για διαγραφή.");
    }else {
           
        int vid = Integer.valueOf(jTextIDpel.getText());
      try {
                Class.forName (driverClassName);
            } catch (ClassNotFoundException ex) {
            }
        try {    
        dbConnection = DriverManager.getConnection (url, username, passwd);
        String insertString = "select deletepelaths(?)";
	insertauto = dbConnection.prepareStatement(insertString);
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
                
                try {
                    insertauto.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
                try {
                    dbConnection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        
                 try {
            insertauto.setInt(1, vid);
            insertauto.executeUpdate();
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
                try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistrofhpelaths() as ANSWER";
             rs = statement.executeQuery(selectString);
            //System.out.println("anid, perioxi, aid, marka, kafsimo, xroma, poid, onoma, epitheto " );
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
                count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
            }
            } 
            Object[][] row = new Object[count][3];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
             index++;
            } 
           
             String[] cols = {"ID", "Όνομα", "Επίθετο"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTablepelaths.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        }   
        try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistofilogpelaths() as ANSWER";
             rs = statement.executeQuery(selectString);
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
            count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","").replaceAll(" ", ".");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
                
            }
            } 
            Object[][] row = new Object[count][5];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
              row[index][4]= pwlhsh[4];
             index++;
            } 
           
             String[] cols = {"op", "date", "ID", "Όνομα", "Επίθετο"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTlogpel.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_jBdeletepelActionPerformed

    private void jBdeletepolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBdeletepolActionPerformed
 if(jTextID.getText().equals("")){
           JOptionPane.showMessageDialog(this, "Δώσε ID για διαγραφή.");
    }else {
           
        int vid = Integer.valueOf(jTextID.getText());
       
        try {
                Class.forName (driverClassName);
            } catch (ClassNotFoundException ex) {
            }
        try {    
        dbConnection = DriverManager.getConnection (url, username, passwd);
        String insertString = "select deletepoliths(?)";
	insertauto = dbConnection.prepareStatement(insertString);
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
                
                try {
                    insertauto.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
                try {
                    dbConnection.close();
                } catch (SQLException ex1) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        
                 try {
            insertauto.setInt(1, vid);
            insertauto.executeUpdate();
        } catch(SQLException ex) {
            System.out.println("\n -- SQL Exception --- \n");
            while(ex != null) {
		System.out.println("Message: " + ex.getMessage());
		ex = ex.getNextException();
            }
        }
                try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistrofhpoliths() as ANSWER";
             rs = statement.executeQuery(selectString);
            //System.out.println("anid, perioxi, aid, marka, kafsimo, xroma, poid, onoma, epitheto " );
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
                count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
            }
            } 
            Object[][] row = new Object[count][3];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
             index++;
            } 
           
             String[] cols = {"ID", "Όνομα", "Επίθετο"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTablepoliths.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
        }    
 try {                                           
             
             Class.forName (driverClassName);
             try {
                 dbConnection = DriverManager.getConnection (url, username, passwd);
             } catch (SQLException ex) {
                 Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
             }
             statement    = dbConnection.createStatement();
             String selectString = "SELECT epistofilogpoliths() as ANSWER";
             rs = statement.executeQuery(selectString);
            int count=0;
            ArrayList<String[]> pinakas = new ArrayList<>();
            while (rs.next()){
            String autokinhta = rs.getString("ANSWER"); 
            count++;
            autokinhta = autokinhta.replaceAll("\\)"," ").replaceAll("\\(","").replaceAll(" ", ".");
            String[] ss = autokinhta.split(" ");
           
            for (String string : ss) {
                pinakas.add(string.split(","));
                
            }
            } 
            Object[][] row = new Object[count][5];
            int index = 0;
             for(String[] pwlhsh : pinakas){
              row[index][0]= pwlhsh[0];
              row[index][1]= pwlhsh[1];
              row[index][2]= pwlhsh[2];
              row[index][3]= pwlhsh[3];
              row[index][4]= pwlhsh[4];
             index++;
            } 
           
             String[] cols = {"op", "date", "ID", "Όνομα", "Επίθετο"};
             DefaultTableModel model = new DefaultTableModel(row,cols);
             jTlogpoliths.setModel(model);
             statement.close();
             dbConnection.close();
             
         } catch (SQLException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_jBdeletepolActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAdd;
    private javax.swing.JButton jBDelete;
    private javax.swing.JButton jBaddpel;
    private javax.swing.JButton jBaddpel1;
    private javax.swing.JButton jBaddpol;
    private javax.swing.JButton jBdeletepel;
    private javax.swing.JButton jBdeletepel1;
    private javax.swing.JButton jBdeletepol;
    private javax.swing.JButton jBemfanish;
    private javax.swing.JButton jBupdateauto;
    private javax.swing.JButton jBupdatepel;
    private javax.swing.JButton jBupdatepel1;
    private javax.swing.JButton jBupdatepol;
    private javax.swing.JTextField jID;
    private javax.swing.JTextField jKafsimo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jMarka;
    private javax.swing.JPanel jPAntipros;
    private javax.swing.JPanel jPAutokinhto;
    private javax.swing.JPanel jPPelaths;
    private javax.swing.JPanel jPPoliths;
    private javax.swing.JPanel jPSinopsh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableauto;
    private javax.swing.JTable jTablepelaths;
    private javax.swing.JTable jTablepelaths1;
    private javax.swing.JTable jTablepoliths;
    private javax.swing.JTextField jTextID;
    private javax.swing.JTextField jTextIDpel;
    private javax.swing.JTextField jTextIDpel1;
    private javax.swing.JTextField jTextepitheto;
    private javax.swing.JTextField jTextepithetopel;
    private javax.swing.JTextField jTextonoma;
    private javax.swing.JTextField jTextonomapel;
    private javax.swing.JTextField jTextonomapel1;
    private javax.swing.JTable jTlogantip;
    private javax.swing.JTable jTlogfileauto;
    private javax.swing.JTable jTlogpel;
    private javax.swing.JTable jTlogpoliths;
    private javax.swing.JTable jTsinopsis;
    private javax.swing.JTextField jXroma;
    // End of variables declaration//GEN-END:variables
}
